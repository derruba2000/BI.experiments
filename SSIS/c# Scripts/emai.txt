using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Net.Mail;
using System.Text.RegularExpressions;
using System.Data.SqlClient;

#endregion

namespace ST_b79b5d4290294f48b7252b8980bb1d75
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
           
                // TODO: Add your code here

                String sEmailServer = Dts.Variables["sEmailServer"].Value.ToString();
                String sEmailUser = Dts.Variables["sEmailUser"].Value.ToString();
                String sEmailPassword = Dts.Variables["sEmailPassword"].Value.ToString();
                String sEmailSendTo = Dts.Variables["sEmailSendTo"].Value.ToString();
                String sEmailSendCC = Dts.Variables["sEmailCC"].Value.ToString();
                String sEmailSendBCC = Dts.Variables["sEmailBCC"].Value.ToString();
                String sEmailSendFrom = Dts.Variables["sEmailSendFrom"].Value.ToString();
                String sEmailSendFromName = Dts.Variables["sEmailSendFromName"].Value.ToString();
                String sEmailPriority = Dts.Variables["sEmailPriority"].Value.ToString();
                string sSubject = Dts.Variables["sEmailSubject"].Value.ToString();
                string sBody = Dts.Variables["sEmailBody"].Value.ToString();
                String reportFile = Dts.Variables["v_reportFile"].Value.ToString();
                String v_month = Dts.Variables["v_month"].Value.ToString();
                String v_year = Dts.Variables["v_year"].Value.ToString();
                String id_proc = Dts.Variables["id_proc"].Value.ToString();
          try
             {
                System.Globalization.DateTimeFormatInfo mfi = new System.Globalization.DateTimeFormatInfo();


                string strMonthName = mfi.GetMonthName(Int16.Parse(v_month)).ToString(); 
                
                if (v_month.Length < 2) v_month = "0" + v_month;
                sSubject = sSubject + " " + v_year + "-" + v_month;


                sBody = "Hi,@<br/><br/> This is a system email, it contains a report with the roylaties corresponding to " + strMonthName + " of " + v_year + ".";
                sBody = sBody + "@<br/><br/> Please do not reply to this email";
                sBody = sBody.Replace("@", System.Environment.NewLine);

                String sEmailPort = "465";

                int iPriority = Convert.ToInt32(sEmailPriority);

                SmtpClient smtpClient = new SmtpClient();
                MailMessage message = new MailMessage();

                MailAddress fromAddress = new MailAddress(sEmailSendFrom, sEmailSendFromName);

                //You can have multiple emails separated by ;
                string[] sEmailTo = Regex.Split(sEmailSendTo, ";");
                string[] sEmailCC = Regex.Split(sEmailSendCC, ";");
                string[] sEmailBCC = Regex.Split(sEmailSendBCC, ";");
                int sEmailServerSMTP = int.Parse(sEmailPort);

                smtpClient.Host = sEmailServer;
                //smtpClient.Port = sEmailServerSMTP;

                System.Net.NetworkCredential myCredentials = new System.Net.NetworkCredential(sEmailUser, sEmailPassword);
                smtpClient.Credentials = myCredentials;
                message.From = fromAddress;

                if (sEmailTo != null)
                {
                    for (int i = 0; i < sEmailTo.Length; ++i)
                    {
                        if (sEmailTo[i] != null && sEmailTo[i] != "")
                        {
                            message.To.Add(sEmailTo[i]);
                        }
                    }
                }

                if (sEmailCC != null)
                {
                    for (int i = 0; i < sEmailCC.Length; ++i)
                    {
                        if (sEmailCC[i] != null && sEmailCC[i] != "")
                        {
                            message.CC.Add(sEmailCC[i]);
                        }
                    }
                }


                if (sEmailBCC != null)
                {
                    for (int i = 0; i < sEmailBCC.Length; ++i)
                    {
                        if (sEmailBCC[i] != null && sEmailBCC[i] != "")
                        {
                            message.Bcc.Add(sEmailBCC[i]);
                        }
                    }
                }

                
                switch (iPriority)
                {
                    case 1:
                        message.Priority = MailPriority.High;
                        break;
                    case 3:
                        message.Priority = MailPriority.Low;
                        break;
                    default:
                        message.Priority = MailPriority.Normal;
                        break;
                }

                string[] myFiles = new string[1];

                myFiles[0] = reportFile;

                //You can enable this for Attachments.  
                //SingleFile is a string variable for the file path.
                foreach (string SingleFile in myFiles)
                {
                    Attachment myAttachment = new Attachment(SingleFile);
                    message.Attachments.Add(myAttachment);
                }

                message.Subject = sSubject;
                message.IsBodyHtml = true;
                message.Body = sBody;

               
                smtpClient.Send(message);
            }catch(Exception e){
                
                SqlConnection myADONETConnection = new SqlConnection();
                myADONETConnection = (SqlConnection)(Dts.Connections["Gnosis ADO-NET"].AcquireConnection(Dts.Transaction) as SqlConnection);



                using (SqlCommand cmd = new SqlCommand("[Gnosis].[p_etlProcessLog]", myADONETConnection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("@id_proc", SqlDbType.Int).Value = id_proc;
                    cmd.Parameters.Add("@msg_description", SqlDbType.VarChar).Value = " Error:Sending Royalties Emails! " +e.Message;
                    cmd.Parameters.Add("@substep", SqlDbType.VarChar).Value = 0;

                    // myADONETConnection.Open();
                    cmd.ExecuteNonQuery();
                }
            }


			Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
